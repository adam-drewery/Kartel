name: Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  
  setup:
    name: 'Setup'
    runs-on: ubuntu-latest
    steps:

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.5.1
  
  build:
    name: 'Test Code'
    runs-on: ubuntu-latest
    needs: [setup]
    steps:

    - uses: actions/checkout@v3
        
    - name: Nuget Restore
      run: dotnet restore
      
    - name: Dotnet Build
      run: dotnet build --no-restore
      
    - name: Dotnet Test
      run: dotnet test --no-build --verbosity normal
      
  docker-compose:
    name: 'Test Containers'
    runs-on: ubuntu-latest
    needs: [ setup ]
    steps:

      - uses: actions/checkout@v3

      - name: Build and test
        run: |
          docker-compose up --build --abort-on-container-exit

  terraform-plan:
    name: 'Test Infrastructure'
    runs-on: ubuntu-latest
    needs: [setup]
    env:
      ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
    steps:

      - uses: actions/checkout@v3

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan
        continue-on-error: false

  terraform-apply:
    name: 'Deploy Infrastructure'
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [ build, terraform-plan, docker-compose ]
    environment:
      name: staging
    env:
      ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
    steps:

    - uses: actions/checkout@v3

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Apply
      run: terraform apply -auto-approve


  deploy-containers:
    name: 'Deploy Containers'
    runs-on: ubuntu-latest
    needs: [terraform-apply]
    environment:
      name: staging
    env:
      ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
    steps:

    - uses: actions/checkout@v3

    - name: Set ACR Credentials
      id: set_output
      run: |
        terraform init
        ACR_USERNAME=$(terraform output -raw acr_username)
        ACR_PASSWORD=$(terraform output -raw acr_password)
        echo "::add-mask::$ACR_USERNAME"
        echo "::add-mask::$ACR_PASSWORD"
        echo "::set-output name=acr_username::$ACR_USERNAME"
        echo "::set-output name=acr_password::$ACR_PASSWORD"
    
    - uses: azure/docker-login@v1
      with:
        login-server: kartel.azurecr.io
        username: ${{ steps.set_output.outputs.acr_username }}
        password: ${{ steps.set_output.outputs.acr_password }}

    - run: |
        docker build -t kartel.azurecr.io/api:latest -f ./web/Kartel.Api/Dockerfile .
        docker push kartel.azurecr.io/api:latest
        
        docker build -t kartel.azurecr.io/web:latest -f ./web/Kartel.Web/Dockerfile .
        docker push kartel.azurecr.io/web:latest

    - uses: azure/login@v1
      with:
        creds: '{"clientId":"${{ secrets.CLIENT_ID }}","clientSecret":"${{ secrets.CLIENT_SECRET }}","subscriptionId":"${{ secrets.SUBSCRIPTION_ID }}","tenantId":"${{ secrets.TENANT_ID }}"}'

    - name: Deploy to Azure Container Instances
      run: |
        az container create --resource-group kartel --name api --image kartel.azurecr.io/api:latest --ports 6840,6841
        az container create --resource-group kartel --name web --image kartel.azurecr.io/web:latest --ports 80
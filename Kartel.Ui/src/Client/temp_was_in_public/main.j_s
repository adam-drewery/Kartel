// The following sample code uses modern ECMAScript 6 features
// that aren't supported in Internet Explorer 11.
// To convert the sample for environments that do not support ECMAScript 6,
// such as Internet Explorer 11, use a transpiler such as
// Babel at http://babeljs.io/.
//
// See Es5-chat.js for a Babel transpiled version of the following code:
// export default startSignalR;
// export { startSignalR, showD3 };

// function startSignalR() {

//     const connection = new signalR.HubConnectionBuilder()
//         // .withUrl("http://localhost:8085/chatHub")
//         .withUrl("http://localhost:8085/chatHub")
//         // .start({ withCredentials: false })
//         .configureLogging(signalR.LogLevel.Information)
//         .build();

//     connection.on("ReceiveMessage", (user, message) => {
//         const encodedMsg = user + " says " + message;
//         const li = document.createElement("li");
//         li.textContent = encodedMsg;
//         document.getElementById("messagesList").appendChild(li);
//     });

//     // document.getElementById("sendButton").addEventListener("click", event => {
//     //     const user = document.getElementById("userInput").value;
//     //     const message = document.getElementById("messageInput").value;
//     //     // console.log("gets called");
//     //     connection.invoke("SendMessage", user, message).catch(err => console.error(err.toString()));
//     //     event.preventDefault();
//     // });

//     async function start() {
//         try {
//             await connection.start();
//             console.log('connected');
//         } catch (err) {
//             console.log(err);
//             setTimeout(() => start(), 5000);
//         }
//     };

//     connection.onclose(async () => {
//         await start({ withCredentials: false });
//     });

//     // this is here to show an alternative to start, including the catch
//     connection.start({ withCredentials: false }).catch(function (err) {
//         return console.error(err.toString());
//     });
// };

// export default function showD3() {
//     var data = [150, 230, 180, 90];

//     var svg = d3.select("#display")
//                 .append("svg")
//                 .attr("width", 300)
//                 .attr("height", 200);

//     svg.selectAll(".bar")
//         .data(data)
//         .enter()
//         .append("rect")
//         .attr({
//         class : "bar",
//         width : function(d) {return d;},
//         height: "40",
//         y : function(d, i) {return i*50 + 10;},
//         x : "10"
//         });
// };